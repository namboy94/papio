/*
This file is part of papio.

papio is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

papio is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with papio.  If not, see <http://www.gnu.org/licenses/>.
*/

ext {
    version = "0.1.0"
    versionCode = 000100
}

// Define class paths
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:+"
    }
}

// Shared operations for subprojectsls
subprojects {

    // Define Repositories for submodules
    repositories {
        jcenter()
    }

    apply plugin: "kotlin"
    apply plugin: "jacoco"

    configurations {
        ktlint
    }

    // Define common submodule dependencies
    dependencies {
        ktlint 'com.github.shyiko:ktlint:+'
        compile "org.jetbrains.kotlin:kotlin-stdlib:+"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:+"
    }

    // Jacoco Test coverage generation. Name must stay jacocoTestReport
    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.setEnabled(true)
            csv.setEnabled(false)
            html.setDestination(new File("${buildDir}/reports/coverage"))
        }
    }

    // Define ktlint task
    task ktlint(type: JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
    }
    check.dependsOn ktlint


    // Makes sure to compile all required classes in JAR files
    jar {
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}

// Print version
task version(type: VersionTask)
class VersionTask extends DefaultTask {
    @TaskAction
    def version() {
        println project.ext.version
    }
}